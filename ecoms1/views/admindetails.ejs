<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Details</title>
    <style>
/* General styles */
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    overflow-x: hidden;
}

/* Header container styles */
#headerContainer {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 20px;
    background-color: #f4f4f4;
    border-bottom: 2px solid #ddd;
}

#headerContainer h1 {
    margin: 0;
    font-size: 30px;
    font-weight: bold;
    text-align: center;
    flex: 1;
}

.back-button {
    background-color: #0A2472;
    color: white;
    border: none;
    padding: 9px 9px;
    font-size: 13px;
    cursor: pointer;
    border-radius: 4px;
    margin-right: 20px;
}
.back-button:hover{
    background-color: #0d5dbb;
}
#createButton {
    background-color: #0A2472;
    color: white;
    border: none;
    padding: 9px 12px;
    font-size: 13px;
    cursor: pointer;
    border-radius: 4px;
    margin-left: 20px;
}
#createButton:hover{
    background-color: #0d5dbb;
}
#editForm, #createForm {
    background-color: #f9f9f9;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    max-width: 600px;
    margin: 20px auto;
    font-family: Arial, sans-serif;
}

/* Form Elements */
#editForm label, #createForm label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
    color: #333;
}

#editForm input, #createForm input,
#editForm select, #createForm select {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 14px;
    box-sizing: border-box;
}

#editForm input[type="submit"], #createForm button[type="submit"] {
    background-color: #0A2472;
    color: white;
    border: none;
    padding: 10px 15px;
    cursor: pointer;
    border-radius: 4px;
    font-size: 16px;
    text-align: center;
    transition: background-color 0.3s ease;
    margin-left: 250px;
}

#editForm input[type="submit"]:hover, #createForm button[type="submit"]:hover {
    background-color: #0d5dbb;
}

/* Input Fields Focus */
#editForm input:focus, #createForm input:focus,
#editForm select:focus, #createForm select:focus {
    border-color: #0A2472;
    outline: none;
    box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
}

/* Placeholder Styling */
#editForm input::placeholder, #createForm input::placeholder {
    color: #999;
    font-style: italic;
}
/* Table styles */
#adminTable {
    width: 80%;
    border-collapse: collapse;
    margin: 20px auto;
    overflow-x: auto;
}

#adminTable thead {
    background-color: #0A2472;
    color: white;
}

#adminTable th, #adminTable td {
    padding: 10px;
    text-align: left;
    border: 1px solid #ddd;
}

#adminTable th {
    text-align: center;
}

#adminTable tbody tr:nth-child(even) {
    background-color: #f9f9f9;
}

#adminTable tbody tr:hover {
    background-color: #f1f1f1;
}

#editFormContainer {
    margin: 20px;
    padding: 20px;
    border: 1px solid #ddd;
    background-color: #f9f9f9;
    border-radius: 4px;
}

form label {
    display: block;
    margin: 10px 0 5px;
    font-weight: bold;
}

form input, form select {
    width: 100%;
    padding: 8px;
    margin-bottom: 15px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
}

form button {
    background-color: #0A2472;
    color: white;
    border: none;
    padding: 10px 15px;
    cursor: pointer;
    border-radius: 4px;
    font-size: 16px;
}

form button:hover {
    background-color: #0056b3;
}
@media(max-width:857px){
    .app-bar #Backend{
        font-size: 20px;
    }
    .app-bar .dropdown{
        font-size: 13px;
    }
}
@media(max-width:752px){
    .app-bar #Backend{
        font-size: 15px;
    }
    .app-bar .dropdown{
        font-size: 11px;
        margin-left: 15px;
    }
    #editForm, #createForm {
        min-width: 500px;
        width: 90%;
    }
}
@media(max-width:609px){
    .app-bar, #adminTable{
        width: 100% !important;
        min-width: 609px !important;
    }
    .app-bar .dropdown span{
        margin-left: 15px !important;
    }
    #headerContainer{
        width: 100% !important;
        min-width: 609px !important;
    }
}
@media (max-width: 600px) {
    #editForm, #createForm {
        padding: 15px;
        width: 90%;
    }

    #editForm input, #createForm input,
    #editForm select, #createForm select {
        font-size: 13px;
        padding: 8px;
    }

    #editForm input[type="submit"], #createForm button[type="submit"] {
        font-size: 14px;
        padding: 8px 10px;
    }
}
@media(max-width:582px){
    .app-bar #Backend{
        white-space: nowrap;
    }
}
@media(max-width:539px){
    .app-bar {
     width: 100%;
     min-width: 539px;
    }
}


    </style>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <%- include('./adminappbar.ejs', { hideDropdownItems: false }) %>

    <div id="headerContainer">
        <button onclick="goBack()" class="back-button">Back</button>
        <h1>ADMIN DETAILS</h1>
        <button id="createButton">Create New Admin</button>
    </div>

    <table id="adminTable">
        <thead>
            <tr>
                <th>Admin ID</th>
                <th>Mobile Number</th>
                <th>Admin Name</th>
                <th>Admin Category</th>
                <th>Actions</th> 
            </tr>
        </thead>
        <tbody>
            <% adminDetails.forEach(admin => { %>
                <tr>
                    <td><%= admin.adminid %></td>
                    <td><%= admin.mobilenumber %></td>
                    <td><%= admin.adminname %></td>
                    <td><%= admin.admincategory %></td>
                    <td>
                        <a href="#" class="editLink" data-adminid="<%= admin.adminid %>">Edit</a> |
                        <a href="#" class="deleteLink" data-adminid="<%= admin.adminid %>">Delete</a>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>

    <div id="editFormContainer"></div>

    <script>
    document.addEventListener("DOMContentLoaded", function() {
        const editLinks = document.querySelectorAll('.editLink');
        const deleteLinks = document.querySelectorAll('.deleteLink');
        const createButton = document.getElementById('createButton');

        editLinks.forEach(link => {
    link.addEventListener('click', function(event) {
        event.preventDefault();
        const adminId = this.getAttribute('data-adminid');
        fetch(`/editadmin/${adminId}`)
            .then(response => response.json())
            .then(data => {
                const editFormHTML = `
    <form id="editForm">
           <label for="adminName">Admin Name:</label>
        <input type="text" id="adminName" name="adminName" value="${data.adminname}">

        <label for="admincategory">Admin Category:</label>
   <select id="admincategory" name="admincategory" class="admincategory-dropdown">
    <option value="UserAdmin" ${data.admincategory === 'UserAdmin' ? 'selected' : ''}>UserAdmin</option>
    <option value="StockAdmin" ${data.admincategory === 'StockAdmin' ? 'selected' : ''}>StockAdmin</option>
    <option value="SuperAdmin" ${data.admincategory === 'SuperAdmin' ? 'selected' : ''}>SuperAdmin</option>
</select>


        <label for="mobileNumber">Mobile Number:</label>
        <input 
            type="tel" 
            id="mobileNumber" 
            name="mobileNumber" 
            value="${data.mobilenumber}" 
            pattern="[0-9]{10}" 
            maxlength="10"
            oninput="this.value = this.value.replace(/[^0-9]/g, '')" 
            title="Mobile number must be exactly 10 digits.">

        <label for="password">New Password:</label>
        <input type="password" id="password" name="password" placeholder="******">
        
        <input type="hidden" id="adminId" name="adminId" value="${data.adminid}">
        
        <button type="submit">Update</button>
    </form>
`;
                document.getElementById('editFormContainer').innerHTML = editFormHTML;

                const editForm = document.getElementById('editForm');
                editForm.addEventListener('submit', function(event) {
                    event.preventDefault();

                    const mobileNumber = document.getElementById('mobileNumber').value.trim();
                    const adminName = document.getElementById('adminName').value.trim();
                    const adminCategory = document.getElementById('admincategory').value.trim();

                    const mobileNumberRegex = /^[0-9]{10}$/;

                    if (!mobileNumber || !mobileNumberRegex.test(mobileNumber)) {
                        Swal.fire({
                            title: 'Warning!',
                            text: 'Mobile number must contain exactly 10 digits.',
                            icon: 'warning',
                            confirmButtonText: 'OK'
                        });
                        return; 
                    }

                    if (!adminName || !adminCategory) {
                        Swal.fire({
                            title: 'Warning!',
                            text: 'Please fill out all fields before submitting.',
                            icon: 'warning',
                            confirmButtonText: 'OK'
                        });
                        return; 
                    }

                    const formData = new FormData(this);

                    fetch('/updateadmin', {
                        method: 'POST',
                        body: new URLSearchParams(formData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        if (data.success) {
                            Swal.fire({
                                title: 'Success!',
                                text: 'Admin details updated successfully',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                location.reload(); 
                            });
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: 'Failed to update admin details',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error updating admin details:', error);
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to update admin details',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    });
                });
            })
            .catch(error => {
                console.error('Error fetching admin details:', error);
            });
    });
});


        deleteLinks.forEach(link => {
            link.addEventListener('click', function(event) {
                event.preventDefault();
                const adminId = this.getAttribute('data-adminid');
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/deleteadmin/${adminId}`, {
                            method: 'DELETE'
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire(
                                    'Deleted!',
                                    'Admin has been deleted.',
                                    'success'
                                ).then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'Failed to delete admin',
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Error deleting admin:', error);
                            Swal.fire({
                                title: 'Error!',
                                text: 'Failed to delete admin',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        });
                    }
                });
            });
        });

        createButton.addEventListener('click', function(event) {
    event.preventDefault();
    const createFormHTML = `
    <form id="createForm">
                <label for="adminName">Admin Name:</label>
        <input type="text" id="adminName" name="adminName" value="">

        <label for="admincategory">Admin Category:</label>
  <select id="admincategory" name="admincategory" class="admincategory-dropdown">
    <option value="UserAdmin">UserAdmin</option>
    <option value="StockAdmin">StockAdmin</option>
    <option value="SuperAdmin">SuperAdmin</option>
</select>

        <label for="mobileNumber">Mobile Number:</label>
        <input 
            type="tel" 
            id="mobileNumber" 
            name="mobileNumber" 
            maxlength="10" 
            pattern="[0-9]{10}" 
            oninput="this.value = this.value.replace(/[^0-9]/g, '')" 
            placeholder="Enter 10-digit mobile number" 
            title="Mobile number must be exactly 10 digits.">
        
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" value="">
        
        <button type="submit">Create</button>
    </form>
`;

    document.getElementById('editFormContainer').innerHTML = createFormHTML;

    const createForm = document.getElementById('createForm');
    createForm.addEventListener('submit', function(event) {
        event.preventDefault();

       
        const mobileNumber = document.getElementById('mobileNumber').value.trim();
        const mobileNumberRegex = /^[0-9]{10}$/;

        if (!mobileNumber || !mobileNumberRegex.test(mobileNumber)) {
            Swal.fire({
                title: 'Warning!',
                text: 'Mobile number must contain exactly 10 digits.',
                icon: 'warning',
                confirmButtonText: 'OK'
            });
            return; 
        }

      
        const adminName = document.getElementById('adminName').value.trim();
        const adminCategory = document.getElementById('admincategory').value.trim();
        const password = document.getElementById('password').value.trim();

        if (!adminName || !adminCategory || !password) {
            Swal.fire({
                title: 'Warning!',
                text: 'Please fill out all fields before submitting.',
                icon: 'warning',
                confirmButtonText: 'OK'
            });
            return; 
        }

        const formData = new FormData(this);

        fetch('/createadmin', {
            method: 'POST',
            body: new URLSearchParams(formData)
        })
        .then(response => response.json())
        .then(data => {
            console.log(data);
            if (data.success) {
                Swal.fire({
                    title: 'Success!',
                    text: 'New admin created successfully',
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to create new admin',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        })
        .catch(error => {
            console.error('Error creating new admin:', error);
            Swal.fire({
                title: 'Error!',
                text: 'Failed to create new admin',
                icon: 'error',
                confirmButtonText: 'OK'
                    });
                });
            });
        });
    });

    function goBack() {
        window.history.back();
    }
    </script>
</body>
</html>