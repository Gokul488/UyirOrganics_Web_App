<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Details</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
            margin: 0;
            padding: 0;
        }

        h1 {
            text-align: center;
            margin-top: 20px;
            color: #333;
        }
        #defaultimg{
            margin-left: 150px;
        }
        a{
            color: #0A2472;
            text-decoration: none;
        }
        a:hover{
            color: #0d5dbb;
        }
        #adminTable {
            width: 80%;
            margin: 20px auto;
            border-collapse: collapse;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        #adminTable th, #adminTable td {
            padding: 12px 15px;
            border: 1px solid #ddd;
            text-align: left;
        }

        #adminTable th {
            background-color: #0A2472;
            color: white;
        }

        #adminTable tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        #adminTable tr:hover {
            background-color: #ddd;
        }

        #editFormContainer {
            width: 50%;
            margin: 20px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        #editForm, #createForm {
            display: flex;
            flex-direction: column;
        }

        #editForm label, #createForm label {
            margin-bottom: 5px;
            color: #333;
        }

        #editForm input, #createForm input {
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        #editForm button, #createForm button {
        padding: 10px 6px; 
        background-color: #0A2472;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
        font-size: 14px; 
        width: 15%;
        margin-left: 275px;
        margin-top: 5px;
        }

        #editForm button:hover, #createForm button:hover {
            background-color:  #0d5dbb;
        }

        .editLink, .deleteLink {
            color: #0056b3;
            cursor: pointer;
            text-decoration: none;
        }

        .editLink:hover, .deleteLink:hover {
            text-decoration: underline;
        }

        #buttonContainer {
            display: flex;
            justify-content: flex-end;
            width: 80%;
            margin: 20px auto;
        }

        #createButton {
            display: block;
            width: 20%;
            padding: 10px;
            background-color: #0A2472;
            color:white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        #createButton:hover {
            background-color:  #0d5dbb;
        }

        .back-button {
            display: inline-block;
            padding: 9px 9px;
            background-color:#0A2472;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            position: relative;
            overflow: hidden;
            margin-left: 10px;
            top: 10px;
        }

        .back-button::before {
            position: absolute;
            top: 0;
            left: 0;
            width: 0;
            height: 100%;
            background-color: #0056b3;
            transition: width 0.3s ease;
        }

        .back-button:hover::before {
            width: 100%;
        }
        .back-button:hover{
            background-color: #0d5dbb;
        }
        .admincategory-dropdown {
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
    }
    </style>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    </head>
    <body>
    <%- include('./adminappbar.ejs', { hideDropdownItems: false }) %>

    <button onclick="goBack()" class="back-button">Back</button>
    <h1>Admin Details</h1>

    <div id="buttonContainer">
        <button id="createButton">Create New Admin</button>
    </div>
    <table id="adminTable">
        <thead>
            <tr>
                <th>Admin ID</th>
                <th>Mobile Number</th>
                <th>Admin Name</th>
                <th>Admin Category</th>
                <th>Actions</th> 
            </tr>
        </thead>
        <tbody>
            <% adminDetails.forEach(admin => { %>
                <tr>
                    <td><%= admin.adminid %></td>
                    <td><%= admin.mobilenumber %></td>
                    <td><%= admin.adminname %></td>
                    <td><%= admin.admincategory %></td>
                    <td>
                        <a href="#" class="editLink" data-adminid="<%= admin.adminid %>">Edit</a> |
                        <a href="#" class="deleteLink" data-adminid="<%= admin.adminid %>">Delete</a>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>

    <div id="editFormContainer"></div>

    <script>
    document.addEventListener("DOMContentLoaded", function() {
        const editLinks = document.querySelectorAll('.editLink');
        const deleteLinks = document.querySelectorAll('.deleteLink');
        const createButton = document.getElementById('createButton');

        editLinks.forEach(link => {
    link.addEventListener('click', function(event) {
        event.preventDefault();
        const adminId = this.getAttribute('data-adminid');
        fetch(`/editadmin/${adminId}`)
            .then(response => response.json())
            .then(data => {
                const editFormHTML = `
    <form id="editForm">
           <label for="adminName">Admin Name:</label>
        <input type="text" id="adminName" name="adminName" value="${data.adminname}">

        <label for="admincategory">Admin Category:</label>
   <select id="admincategory" name="admincategory" class="admincategory-dropdown">
    <option value="UserAdmin" ${data.admincategory === 'UserAdmin' ? 'selected' : ''}>UserAdmin</option>
    <option value="StockAdmin" ${data.admincategory === 'StockAdmin' ? 'selected' : ''}>StockAdmin</option>
    <option value="SuperAdmin" ${data.admincategory === 'SuperAdmin' ? 'selected' : ''}>SuperAdmin</option>
</select>


        <label for="mobileNumber">Mobile Number:</label>
        <input 
            type="tel" 
            id="mobileNumber" 
            name="mobileNumber" 
            value="${data.mobilenumber}" 
            pattern="[0-9]{10}" 
            maxlength="10"
            oninput="this.value = this.value.replace(/[^0-9]/g, '')" 
            title="Mobile number must be exactly 10 digits.">

        <label for="password">New Password:</label>
        <input type="password" id="password" name="password" placeholder="******">
        
        <input type="hidden" id="adminId" name="adminId" value="${data.adminid}">
        
        <button type="submit">Update</button>
    </form>
`;
                document.getElementById('editFormContainer').innerHTML = editFormHTML;

                const editForm = document.getElementById('editForm');
                editForm.addEventListener('submit', function(event) {
                    event.preventDefault();

                    const mobileNumber = document.getElementById('mobileNumber').value.trim();
                    const adminName = document.getElementById('adminName').value.trim();
                    const adminCategory = document.getElementById('admincategory').value.trim();

                    const mobileNumberRegex = /^[0-9]{10}$/;

                    if (!mobileNumber || !mobileNumberRegex.test(mobileNumber)) {
                        Swal.fire({
                            title: 'Warning!',
                            text: 'Mobile number must contain exactly 10 digits.',
                            icon: 'warning',
                            confirmButtonText: 'OK'
                        });
                        return; 
                    }

                    if (!adminName || !adminCategory) {
                        Swal.fire({
                            title: 'Warning!',
                            text: 'Please fill out all fields before submitting.',
                            icon: 'warning',
                            confirmButtonText: 'OK'
                        });
                        return; 
                    }

                    const formData = new FormData(this);

                    fetch('/updateadmin', {
                        method: 'POST',
                        body: new URLSearchParams(formData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        if (data.success) {
                            Swal.fire({
                                title: 'Success!',
                                text: 'Admin details updated successfully',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                location.reload(); 
                            });
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: 'Failed to update admin details',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error updating admin details:', error);
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to update admin details',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    });
                });
            })
            .catch(error => {
                console.error('Error fetching admin details:', error);
            });
    });
});


        deleteLinks.forEach(link => {
            link.addEventListener('click', function(event) {
                event.preventDefault();
                const adminId = this.getAttribute('data-adminid');
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/deleteadmin/${adminId}`, {
                            method: 'DELETE'
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire(
                                    'Deleted!',
                                    'Admin has been deleted.',
                                    'success'
                                ).then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'Failed to delete admin',
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Error deleting admin:', error);
                            Swal.fire({
                                title: 'Error!',
                                text: 'Failed to delete admin',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        });
                    }
                });
            });
        });

        createButton.addEventListener('click', function(event) {
    event.preventDefault();
    const createFormHTML = `
    <form id="createForm">
                <label for="adminName">Admin Name:</label>
        <input type="text" id="adminName" name="adminName" value="">

        <label for="admincategory">Admin Category:</label>
  <select id="admincategory" name="admincategory" class="admincategory-dropdown">
    <option value="UserAdmin">UserAdmin</option>
    <option value="StockAdmin">StockAdmin</option>
    <option value="SuperAdmin">SuperAdmin</option>
</select>

        <label for="mobileNumber">Mobile Number:</label>
        <input 
            type="tel" 
            id="mobileNumber" 
            name="mobileNumber" 
            maxlength="10" 
            pattern="[0-9]{10}" 
            oninput="this.value = this.value.replace(/[^0-9]/g, '')" 
            placeholder="Enter 10-digit mobile number" 
            title="Mobile number must be exactly 10 digits.">
        
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" value="">
        
        <button type="submit">Create</button>
    </form>
`;

    document.getElementById('editFormContainer').innerHTML = createFormHTML;

    const createForm = document.getElementById('createForm');
    createForm.addEventListener('submit', function(event) {
        event.preventDefault();

       
        const mobileNumber = document.getElementById('mobileNumber').value.trim();
        const mobileNumberRegex = /^[0-9]{10}$/;

        if (!mobileNumber || !mobileNumberRegex.test(mobileNumber)) {
            Swal.fire({
                title: 'Warning!',
                text: 'Mobile number must contain exactly 10 digits.',
                icon: 'warning',
                confirmButtonText: 'OK'
            });
            return; 
        }

      
        const adminName = document.getElementById('adminName').value.trim();
        const adminCategory = document.getElementById('admincategory').value.trim();
        const password = document.getElementById('password').value.trim();

        if (!adminName || !adminCategory || !password) {
            Swal.fire({
                title: 'Warning!',
                text: 'Please fill out all fields before submitting.',
                icon: 'warning',
                confirmButtonText: 'OK'
            });
            return; 
        }

        const formData = new FormData(this);

        fetch('/createadmin', {
            method: 'POST',
            body: new URLSearchParams(formData)
        })
        .then(response => response.json())
        .then(data => {
            console.log(data);
            if (data.success) {
                Swal.fire({
                    title: 'Success!',
                    text: 'New admin created successfully',
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to create new admin',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        })
        .catch(error => {
            console.error('Error creating new admin:', error);
            Swal.fire({
                title: 'Error!',
                text: 'Failed to create new admin',
                icon: 'error',
                confirmButtonText: 'OK'
                    });
                });
            });
        });
    });

    function goBack() {
        window.history.back();
    }
    </script>
</body>
</html>