<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" integrity="sha512-K7U7pm0htdFy4XZKoPIdRnTSjFmMhj1zV9LzmZv5wS+9hSJQVgdE/KdS+1aFqu4t9eDvWGytiufhsRY5Itskag==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <title>Orders for Store</title>
    <style>

body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.header-options {
  display: flex;
    align-items: center; 
    justify-content: space-between;
    padding: 10px 20px;
    gap: 10px;
    flex-wrap: nowrap; 
    width: 100%;
    box-sizing: border-box; 
}

.header-options .back {
  margin-right: 10px;
}

.header-options h1 {
  flex: 1; 
  text-align: center;
  margin: 0;
  font-weight: bold;
  font-size: 1.5rem;
}

.header-options .filters,
.header-options .print1 {
  display: flex;
  align-items: center;
}
.amount-column {
  text-align: right !important;
}

.header-options .filters > div {
  display: flex;
  align-items: center;
  margin-right: 15px;
}

.header-options label {
  white-space: nowrap;
  margin-right: 5px;
  margin-left: 50px;
}

.header-options input[type="date"],
.header-options select,
.header-options button {
  padding: 5px;
  font-size: 1rem;
  margin-right: 5px;
}

button {
  background-color: #0A2472;
  color: #fff;
  border: none;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
}

button:hover {
  background-color: #0d5dbb;
}

.table-container {
  padding: 10px;
  width: 100%; 
}

.table {
  width: 100%;
  border-collapse: collapse;
  table-layout: fixed; 
  min-width: 821px; 
}

.table th, .table td {
  border: 1px solid #ddd;
  padding: 10px;
  text-align: left;
  word-wrap: break-word;
}

.table th {
  background-color: #0A2472;
  color: #fff;
}

.table td {
  word-wrap: break-word;
}

.btn-primary {
  background-color: #0A2472;
  color: #fff;
}

.btn-primary:hover {
  background-color: #0d5dbb;
}
.back-button {
      order: 1;
      display: inline-block;
      padding: 5px 9px !important;
      background-color: #0A2472;
      color: #fff;
      border: none;
      border-radius: 5px !important ;
      margin-top: -7px 0 0 10px;
      cursor: pointer;
      position: relative;
      overflow: hidden;
      font-size: 14px !important;
    }

    .back-button::before {
      position: absolute;
      top: 0;
      left: 0;
      width: 0;
      height: 100%;
      background-color: #0056b3;
      transition: width 0.3s ease;
    }

    .back-button:hover::before {
      width: 100%;
    }
.back-button:hover{
  background-color: #0d5dbb;
}
.order-stats {
  display: flex;
  gap: 15px;
  padding: 10px;
  background-color: #e9ecef;
  border-bottom: 1px solid #ddd;
}

.order-stats p {
  margin: 0;
}

@media print {
      .print-button, .back-button, .filters{
        display: none !important;
      }
 .app-bar .logo, .app-bar .dropdown, .app-bar #Backend, .app-bar #common-name{
            display: none;
        }
      .app-bar #sname{
            text-align: center;
            margin-left: 400px;
            font-size: 16px !important; /* Adjust font size for printing */
            color: black !important ; 
        }
    }
@media (max-width: 1084px) {
    .app-bar {
        width: 100%;
        min-width: 1084px; 
    }
    .table-container{
      width: 90%;
      min-width: 1084px;
    }
}
@media(max-width:965px) {
  .header-options {
    display: flex;
    align-items: center; 
    justify-content: space-between;
    padding: 5px 10px;
    gap: 5px;
    flex-wrap: nowrap; 
    width: 50%;
    box-sizing: border-box; 
  }

  .header-options h1 {
    font-size: 1.25rem;
    margin: 0; 
    width: 100%;
    text-align: center; 
  }

  .header-options .filters,
  .header-options .print1 {
    width: auto; 
    margin-top: 10px; 
  }

  .header-options .filters > div,
  .header-options .print1 {
    width: 100%;
    margin-right: 0;
    text-align: left;
  }

  .header-options input[type="date"],
  .header-options select,
  .header-options button {
    font-size: 0.875rem; 
    padding: 4px 8px; 
    margin-right: 5px;
    max-width: 100%; 
  }

  .header-options button {
    font-size: 0.875rem; 
    padding: 6px 10px; 
    max-width: 100%; 
  }

  .order-stats p {
    font-size: 0.875rem; 
    text-align: left; 
  }

  .table-container {
    padding: 5px; 
  }

  .table th, .table td {
    padding: 8px; 
  }
}


</style>
</head>
<body>
  <%- include('storeappbar', { name: storeName, contactname: contactName, storeId: storeId }) %>

  <div class="header-options">
    <div class="back">
      <button onclick="goBack()" class="back-button">Back</button>
    </div>
    
    <div class="filters">
      <div class="status-filter-group">
        <label for="statusFilter">Filter by Status:</label>
        <select name="status" id="statusFilter" onchange="filterByStatus()">
          <option value="">All</option>
          <option value="Ordered">Ordered</option>
          <option value="Partially Delivered">Partially Delivered</option>
          <option value="Delivered">Delivered</option>
        </select>
      </div>
  
      <h1>ORDERS</h1>
  
      <div class="date-filter-group">
        <label for="fromDateFilter">From:</label>
        <input type="date" name="fromDate" id="fromDateFilter">
        <span>to</span>
        <input type="date" name="toDate" id="toDateFilter">
        <button type="button" onclick="handleFilter()">Filter</button>
      </div>
    </div>
  
    <div class="print1">
      <button onclick="printOrders()" class="print-button">Print</button>
    </div>
  </div>
  
  <div class="order-stats">
    <p>Total Orders: <span id="totalOrdersCount"><%= totalOrdersCount %></span></p>
    <p>Open Orders: <span id="openOrdersCount"><%= openOrdersCount %></span></p>
  </div>
  <div class="table-container">
  <table class="table">
    <thead>
      <tr>
        <th>Order ID</th>
        <th>Order Date</th>
        <th>User Name</th>
        <th>Mobile Number</th>
        <th>Address</th>
        <th>Total Amount</th>
        <th>Overall Status</th>
        <th>View Details</th>
      </tr>
    </thead>
    <tbody>
      <% if (orders && orders.length > 0) { %>
        <% let groupedOrders = {}; %>
        <% orders.forEach(order => { %>
          <% if (!groupedOrders[order.orderid]) { %>
            <% groupedOrders[order.orderid] = {
              orderid: order.orderid,
              userDetails: order.userDetails,
              totalprice: parseFloat(order.totalprice),
              overallstatus: order.overallstatus,
              formattedOrderDate: order.formattedOrderDate // Use the formatted order date
            }; %>
          <% } else { %>
            <% groupedOrders[order.orderid].totalprice += parseFloat(order.totalprice); %>
          <% } %>
        <% }); %>
        <% Object.values(groupedOrders)
        .sort((a, b) => parseInt(b.orderid) - parseInt(a.orderid)) // Sort by `orderid` in descending order
        .forEach(groupedOrder => { %>
      <tr>
        <td><%= groupedOrder.orderid %></td>
        <td><%= groupedOrder.formattedOrderDate %></td>
        <td><%= groupedOrder.userDetails ? groupedOrder.userDetails.name : 'N/A' %></td>
        <td><%= groupedOrder.userDetails ? groupedOrder.userDetails.mobilenumber : 'N/A' %></td>
        <td><%= groupedOrder.userDetails ? groupedOrder.userDetails.address : 'N/A' %></td>
        <td class="amount-column">â‚¹<%= groupedOrder.totalprice.toFixed(2) %></td>
        <td><%= groupedOrder.overallstatus %></td>
        <td>
          <a href="/storeorderdetails/<%= groupedOrder.orderid %>?storeid=<%= storeId %>" class="btn btn-primary">View Details</a>
        </td>
      </tr>
      <% }); %>
      
      
      <% } else { %>
        <tr>
          <td colspan="8">No orders found.</td>
        </tr>
      <% } %>
    </tbody>
  </table>
</div>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
  
  <script>
    function confirmLogout() {
      console.log("Logout function called");
      Swal.fire({
        title: 'Logout Confirmation',
        text: 'Are you sure you want to logout?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, Logout',
      }).then((result) => {
        if (result.isConfirmed) {
          console.log("Logout confirmed");
          window.location.href = 'http://localhost:7777/login';
        } else {
          console.log("Logout cancelled");
          const errorMessage = 'Logout cancelled.';
          displayErrorDialog('Cancelled', errorMessage);
        }
      });
    }
  
  document.addEventListener('DOMContentLoaded', function() {
  const currentDate = new Date();
  const startDate = new Date();
  startDate.setDate(startDate.getDate() - 90);

  const urlParams = new URLSearchParams(window.location.search);
  const fromDate = urlParams.get('fromDate');
  const toDate = urlParams.get('toDate');

  const fromDateInput = document.getElementById('fromDateFilter');
  const toDateInput = document.getElementById('toDateFilter');

  if (window.performance.navigation.type === 1) {
    fromDateInput.value = formatDate(startDate);
    toDateInput.value = formatDate(currentDate);
  } else {
    if (fromDate) {
      fromDateInput.value = fromDate;
    } else {
      fromDateInput.value = formatDate(startDate);
    }

    if (toDate) {
      toDateInput.value = toDate;
    } else {
      toDateInput.value = formatDate(currentDate);
    }
  }
});

function formatDate(date) {
  return date.toISOString().split('T')[0];
}

function handleFilter() {
  const fromDateInput = document.getElementById('fromDateFilter').value;
  const toDateInput = document.getElementById('toDateFilter').value;

  const urlParams = new URLSearchParams(window.location.search);
  if (fromDateInput) urlParams.set('fromDate', fromDateInput);
  else urlParams.delete('fromDate');
  if (toDateInput) urlParams.set('toDate', toDateInput);
  else urlParams.delete('toDate');

  const newUrl = `${window.location.pathname}?${urlParams.toString()}`;
  window.location.href = newUrl;
}
 

    function filterByStatus() {
      const statusFilter = document.getElementById('statusFilter').value.toLowerCase();
      const rows = document.querySelectorAll('.table tbody tr');

      rows.forEach(row => {
        const statusCell = row.querySelector('td:nth-child(7)').textContent.trim().toLowerCase();
        const statusMatch = (statusFilter === '' || statusCell.includes(statusFilter));
        if (statusMatch) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    }
  
    function goBack() {
      window.history.back();
    }
  
    function printOrders() {
      window.print();
    }
  </script>
</body>
</html>