<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" integrity="sha512-K7U7pm0htdFy4XZKoPIdRnTSjFmMhj1zV9LzmZv5wS+9hSJQVgdE/KdS+1aFqu4t9eDvWGytiufhsRY5Itskag==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <title>Orders for Store</title>
    <style>
        .header-options {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px;
            background-color: #f4f4f4;
            border-bottom: 1px solid #ccc;
            white-space: nowrap;  
        }

        .header-options .back {
            margin-right: 20px;
        }

        .back-button {
            background-color: #0A2472;
            color: white;
            border: none;
            padding: 8px 10px;
            border-radius: 4px;
            cursor: pointer;
        }

        .header-options .filters {
            display: flex;
            align-items: center;
            gap: 15px;
            flex-grow: 1;
        }

        .status-filter-group,
        .date-filter-group {
            display: flex;
            align-items: center;
            margin-right: 200px;
            gap: 5px;
        }

        .filters h1 {
            text-align: center; 
            font-size: 30px;
            font-weight: bold;
            margin: 0 60px; 
        }

        h2 {
            margin-left: 100px;
        }

        #statusFilter,
        #fromDateFilter,
        #toDateFilter {
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 4px;
            white-space: nowrap; 
        }

        button {
            background-color: #0A2472;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            border-radius: 4px;
            display: inline-block;
            transition: background-color 0.3s ease;
            border: 1px solid;
        }
        button:hover{
            background-color: #0d5dbb;
        }
        .print1 {
            margin-right: auto; 
        }

        .print1 .print-button {
            margin-left: -140px;
            background-color: #0A2472;
            color: #fff;
            border: none;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
        }
        .print1 .print-button:hover {
            background-color: #0d5dbb; 
}
        body {
            font-family: Arial, sans-serif;
        }

        table {
            border-collapse: collapse;
            width: 100%;
            margin: 20px;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #0A2472;
            color: #fff;
        }

        tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        tr:hover {
            background-color: #ddd;
        }

        .material-icons {
            padding-top: 20px;
        }

        .dropdown > span {
            margin-left: 5px;
        }

        .back {
            margin-left: 10px;
        }

        .order-stats {
            display: flex;
            align-items: center; 
            gap: 20px; 
            margin-top: 10px;
            margin-left: 82px;
        }

        .order-stats p {
            margin: 0; 
            padding: 0; 
        }
 .btn-primary{
    background-color: #0A2472;
}

        .back-button {
            margin-right: 10px; 
        }

        @media print {
            body {
                font-family: Arial, sans-serif;
            }

            .app-bar,
            .header-container,
            .order-stats {
                display: none !important;
            }

            .print-header {
                text-align: center;
                margin-bottom: 20px;
            }

            .table {
                margin: 0;
            }

            table th:last-child,
            table td:last-child, .header-options {
                display: none;
            }
        }

        @media (max-width: 1375px) {
            .app-bar {
                width: 100%;
                min-width: 1375px; 
            }
        }

        @media (max-width: 715px) {
            .app-bar {
                width: 100%;
                min-width: 715px; 
            }
        }

        @media (max-width: 714px) {
            .app-bar {
                width: 100%;
                min-width: 714px; 
            }
        }
    </style>
</head>
<body>
  <%- include('storeappbar', { name: storeName, contactname: contactName, storeId: storeId }) %>

  <div class="header-options">
    <div class="back">
      <button onclick="goBack()" class="back-button">Back</button>
    </div>
    
    <div class="filters">
      <div class="status-filter-group">
        <label for="statusFilter">Filter by Status:</label>
        <select name="status" id="statusFilter" onchange="filterByStatus()">
          <option value="">All</option>
          <option value="Ordered">Ordered</option>
          <option value="Partially Delivered">Partially Delivered</option>
          <option value="Delivered">Delivered</option>
        </select>
      </div>
  
      <h1>ORDERS</h1>
  
      <div class="date-filter-group">
        <label for="fromDateFilter">Filter by Date:</label>
        <input type="date" name="fromDate" id="fromDateFilter">
        <span>to</span>
        <input type="date" name="toDate" id="toDateFilter">
        <button type="button" onclick="handleFilter()">Filter</button>
      </div>
    </div>
  
    <div class="print1">
      <button onclick="printOrders()" class="print-button">Print</button>
    </div>
  </div>
  
  <div class="order-stats">
    <p>Total Orders: <span id="totalOrdersCount"><%= totalOrdersCount %></span></p>
    <p>Open Orders: <span id="openOrdersCount"><%= openOrdersCount %></span></p>
  </div>
  
  <table class="table">
    <thead>
      <tr>
        <th>Order ID</th>
        <th>Order Date</th>
        <th>User Name</th>
        <th>Mobile Number</th>
        <th>Address</th>
        <th>Total Amount</th>
        <th>Overall Status</th>
        <th>View Details</th>
      </tr>
    </thead>
    <tbody>
      <% if (orders && orders.length > 0) { %>
        <% let groupedOrders = {}; %>
        <% orders.forEach(order => { %>
          <% if (!groupedOrders[order.orderid]) { %>
            <% groupedOrders[order.orderid] = {
              orderid: order.orderid,
              userDetails: order.userDetails,
              totalprice: parseFloat(order.totalprice),
              overallstatus: order.overallstatus,
              orderdate: new Date(order.orderdate)
            }; %>
          <% } else { %>
            <% groupedOrders[order.orderid].totalprice += parseFloat(order.totalprice); %>
          <% } %>
        <% }); %>
        <% Object.values(groupedOrders)
          .sort((a, b) => b.orderdate - a.orderdate)
          .forEach(groupedOrder => { %>
          <tr>
            <td><%= groupedOrder.orderid %></td>
            <td><%= groupedOrder.orderdate.toLocaleDateString('en-GB') %></td>
            <td><%= groupedOrder.userDetails ? groupedOrder.userDetails.name : 'N/A' %></td>
            <td><%= groupedOrder.userDetails ? groupedOrder.userDetails.mobilenumber : 'N/A' %></td>
            <td><%= groupedOrder.userDetails ? groupedOrder.userDetails.address : 'N/A' %></td>
            <td>â‚¹<%= groupedOrder.totalprice.toFixed(2) %></td>
            <td><%= groupedOrder.overallstatus %></td>
            <td>
              <a href="/storeorderdetails/<%= groupedOrder.orderid %>?storeid=<%= storeId %>" class="btn btn-primary">View Details</a>
            </td>
          </tr>
        <% }); %>
      <% } else { %>
        <tr>
          <td colspan="8">No orders found.</td>
        </tr>
      <% } %>
    </tbody>
  </table>
  
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
  
  <script>
    function confirmLogout() {
      console.log("Logout function called");
      Swal.fire({
        title: 'Logout Confirmation',
        text: 'Are you sure you want to logout?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, Logout',
      }).then((result) => {
        if (result.isConfirmed) {
          console.log("Logout confirmed");
          window.location.href = 'http://localhost:7777/login';
        } else {
          console.log("Logout cancelled");
          const errorMessage = 'Logout cancelled.';
          displayErrorDialog('Cancelled', errorMessage);
        }
      });
    }
  
    function formatDate(date) {
      return date.toISOString().split('T')[0];
    }
  
    document.addEventListener('DOMContentLoaded', function() {
      const currentDate = new Date();
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - 90);
  
      document.getElementById('fromDateFilter').value = formatDate(startDate);
      document.getElementById('toDateFilter').value = formatDate(currentDate);
    });
  
    function handleFilter() {
      const fromDateInput = document.getElementById('fromDateFilter').value;
      const toDateInput = document.getElementById('toDateFilter').value;
  
      const fromDate = new Date(fromDateInput);
      const toDate = new Date(toDateInput);
  
      const rows = document.querySelectorAll('.table tbody tr');
  
      rows.forEach(row => {
        const orderDateStr = row.querySelector('td:nth-child(2)').textContent.trim();
        let orderDate;
        if (orderDateStr.includes('/')) {
          const [day, month, year] = orderDateStr.split('/');
          orderDate = new Date(`${year}-${month}-${day}`);
        } else {
          orderDate = new Date(orderDateStr);
        }
        if (isNaN(orderDate.getTime())) {
          console.log('Invalid date format:', orderDateStr);
          return;
        }
        const dateMatch = (fromDateInput === '' || toDateInput === '' || (orderDate >= fromDate && orderDate <= toDate));
        if (dateMatch) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    }

    function filterByStatus() {
      const statusFilter = document.getElementById('statusFilter').value.toLowerCase();
      const rows = document.querySelectorAll('.table tbody tr');

      rows.forEach(row => {
        const statusCell = row.querySelector('td:nth-child(7)').textContent.trim().toLowerCase();
        const statusMatch = (statusFilter === '' || statusCell.includes(statusFilter));
        if (statusMatch) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    }
  
    function goBack() {
      window.history.back();
    }
  
    function printOrders() {
      window.print();
    }
  </script>
</body>
</html>